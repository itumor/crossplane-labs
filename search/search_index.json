{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Crossplane Labs","text":"<p>We're thrilled to have you join us on this exciting journey of exploration and innovation. At Crossplane Labs, we're passionate about pushing the boundaries of what's possible and creating a collaborative environment where ideas flourish.</p>"},{"location":"#what-to-expect","title":"What to Expect","text":"<ul> <li> <p>Innovation: Get ready to dive into a world of innovation and creativity. We encourage thinking outside the box and pushing the limits of what can be achieved.</p> </li> <li> <p>Collaboration: Crossplane Labs is a place where collaboration is key. Share your ideas, work with others, and let's build something amazing together.</p> </li> <li> <p>Learning: Whether you're a seasoned expert or just starting, there's always room to learn and grow. Embrace the opportunity to expand your knowledge and skills.</p> </li> </ul>"},{"location":"#connect-with-us","title":"Connect with Us","text":"<p>Stay connected with the Crossplane Labs community:</p> <ul> <li>Follow us on linkedin for the latest updates and announcements.</li> </ul> <p>Once again, welcome to Crossplane Labs! We can't wait to see what we can achieve together.</p> <p>Happy exploring!</p>"},{"location":"#beginners-labs","title":"Beginner's Labs","text":"<p>If you're new to Crossplane, start here to get hands-on experience with the basics. Learn how to define, provision, and manage infrastructure using Kubernetes-style APIs.</p> <p>Explore Beginner's Labs</p>"},{"location":"#intermediate-labs","title":"Intermediate Labs","text":"<p>Ready to dive deeper? Explore intermediate labs to enhance your skills and understanding of Crossplane's capabilities. Gain practical insights and tackle more complex scenarios.</p> <p>Explore Intermediate Labs</p>"},{"location":"#advanced-labs","title":"Advanced Labs","text":"<p>For the experts, our advanced labs offer challenges and real-world scenarios to test your proficiency with Crossplane. Fine-tune your skills and become a Crossplane pro.</p> <p>Explore Advanced Labs</p>"},{"location":"#expert-labs","title":"Expert Labs","text":"<p>Ready to master Crossplane? Our expert labs provide in-depth, advanced topics and techniques. Elevate your expertise and tackle complex infrastructure management scenarios.</p> <p>Explore Expert Labs</p>"},{"location":"#mastermind-labs","title":"Mastermind Labs","text":"<p>The pinnacle of Crossplane mastery. Mastermind labs are designed for the true experts who seek to push the boundaries of what's possible with Crossplane.</p> <p>Explore Mastermind Labs</p>"},{"location":"about/","title":"About Crossplane Labs","text":"<p>Welcome to Crossplane Labs, the experimental playground where innovation meets infrastructure. Crossplane Labs is an initiative driven by a passionate group of pioneers, pushing the boundaries of what's possible in the world of cloud-native computing.</p>"},{"location":"about/#who-we-are","title":"Who We Are","text":"<p>Crossplane Labs is not just a team; it's a collective of curious minds, explorers, and trailblazers. Our diverse group of engineers and architects are united by a shared vision: to explore the frontiers of cloud-native technology and build the future of infrastructure management.</p>"},{"location":"about/#our-playground","title":"Our Playground","text":"<p>In the labs, we embrace the spirit of experimentation. Here, we challenge the status quo, test new ideas, and incubate cutting-edge features that could redefine how you interact with your cloud resources. It's a space where creativity and innovation flourish.</p>"},{"location":"about/#our-vision","title":"Our Vision","text":"<p>Crossplane Labs is not bound by convention. We aspire to be the breeding ground for the next big ideas in cloud-native development. Our vision is to inspire and empower the community to think beyond the ordinary, encouraging a culture of continuous exploration and improvement.</p>"},{"location":"about/#what-drives-us","title":"What Drives Us","text":"<p>The thrill of discovery, the joy of solving complex problems, and the satisfaction of pushing the envelope\u2014these are the driving forces behind Crossplane Labs. We believe that by fostering a collaborative environment, we can collectively shape the future of infrastructure management.</p>"},{"location":"about/#join-the-experiment","title":"Join the Experiment","text":"<p>Whether you're a seasoned developer, a curious tinkerer, or someone with a bold idea, Crossplane Labs is open to all who seek to push the boundaries. Join us in the experiment, contribute your ideas, and let's build the future together.</p> <p>Thank you for being a part of the Crossplane Labs community\u2014where innovation knows no bounds!</p>"},{"location":"lab0/","title":"Lab-00 : Installing EKS, Crossplane, and Setting up the Development Environment","text":"<p>This lab is a step-by-step guide to install EKS, Crossplane, and set up the development environment. It is essential to complete this lab as it serves as the foundation for the subsequent steps.</p>"},{"location":"lab0/#prerequisites","title":"Prerequisites","text":"<p>Before starting this lab, ensure that you have the following:</p> <ul> <li>Access to an AWS account</li> <li>Basic knowledge of AWS services and Kubernetes</li> </ul>"},{"location":"lab0/#lab-instructions","title":"Lab Instructions","text":"<p>Follow the instructions below to install EKS, Crossplane, and set up the development environment:</p> <ol> <li> <p>Install the AWS CLI by following the instructions in the AWS CLI User Guide.</p> </li> <li> <p>Install eksctl by running the following command: <code>choco install eksctl</code>. For more details, refer to the eksctl installation guide.</p> </li> <li> <p>Install Helm by following the instructions in the Helm documentation.</p> </li> <li> <p>Use AWS CloudShell for an integrated AWS CLI experience. For more information, refer to the AWS CloudShell documentation.</p> </li> <li> <p>Create a Kubernetes cluster using eksctl by running the following command: <code>eksctl create cluster -f cluster.yaml</code>. Make sure to provide the appropriate configuration in the <code>cluster.yaml</code> file. For more details, refer to the eksctl documentation.</p> </li> </ol> cluster.yaml <pre><code># A simple example of ClusterConfig object:\n---\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: crossplane-cluster-1\n  region: eu-central-1\n\n#nodeGroups:\n#  - name: ng-1\n#    instanceType: m5.large\n#    desiredCapacity: 1\n\nmanagedNodeGroups:\n- name: spot\n  instanceTypes: [\"t4g.medium\",\"t4g.small\"]\n  spot: true\n  minSize: 2\n  maxSize: 4\n\nmanagedNodeGroups:\n- name: spot\n  instanceTypes: [\"t4g.medium\",\"t4g.small\"]\n  spot: true\n  minSize: 2\n  maxSize: 4\n\n\n#cloudWatch:\n    #clusterLogging:\n        # enable specific types of cluster control plane logs\n        # enableTypes: []\n        # all supported types: \"api\", \"audit\", \"authenticator\", \"controllerManager\", \"scheduler\"\n        # supported special values: \"*\" and \"all\"\n\n</code></pre> <ol> <li> <p>Follow the steps in the Crossplane documentation to install Crossplane and the AWS provider. This includes installing the Crossplane Helm chart and configuring the AWS provider with the necessary credentials.</p> </li> <li> <p>Set up your Kubeconfig file to connect to your Amazon EKS cluster. Follow the instructions in the Amazon EKS User Guide based on your operating system.</p> </li> <li> <p>Additional Steps:</p> </li> <li>Install the AWS CLI MSI by downloading it from here.</li> <li>Configure the AWS CLI by running the <code>aws configure</code> command.</li> </ol> <p>Please note that this lab is a prerequisite and serves as the base for installing EKS, Crossplane, and setting up the development environment. It is important to complete this lab before proceeding to the next steps.</p> <p>Feel free to modify the content as needed to fit your specific requirements.</p>"},{"location":"lab1/","title":"Lab Document: Crossplane AWS S3 Provider Configuration","text":""},{"location":"lab1/#overview","title":"Overview","text":"<p>This lab will guide you through the setup of a Crossplane AWS S3 provider using a secret for AWS credentials and creating an S3 bucket in the specified region.</p>"},{"location":"lab1/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to a Kubernetes cluster</li> <li>Crossplane installed on the Kubernetes cluster</li> <li>AWS account credentials</li> </ul>"},{"location":"lab1/#checklist","title":"Checklist","text":"<ul> <li>[ ] Configure AWS Credentials and the k8s secret </li> <li>[ ] Install the AWS S3 Provider</li> <li>[ ] Create the Provider Config</li> <li>[ ] Create an S3 Bucket</li> <li>[ ] Check the s3 Bucket available on AWS</li> </ul>"},{"location":"lab1/#steps","title":"Steps","text":""},{"location":"lab1/#1-configure-aws-credentials","title":"1. Configure AWS Credentials","text":"<p>Edit the Crossplane ProviderConfig YAML to include your AWS credentials:</p> aws-ProviderConfig.yaml <pre><code>apiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n</code></pre> <p>Replace <code>&lt;aws_access_key_id&gt;</code> and <code>&lt;aws_secret_access_key&gt;</code> with your AWS access key ID and secret access key.</p>"},{"location":"lab1/#2-create-an-s3-bucket","title":"2. Create an S3 Bucket","text":"<p>Edit the S3 Bucket YAML to define your bucket configuration:</p> Bucket.yaml <pre><code>apiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: crossplane-bucket-e017b4c8\nspec:\n  forProvider:\n    region: eu-central-1\n  providerConfigRef:\n    name: default\n</code></pre> <p>Replace <code>eu-central-1</code> with your desired AWS region.</p>"},{"location":"lab1/#3-configure-the-aws-s3-provider","title":"3. Configure the AWS S3 Provider","text":"<p>Edit the AWS S3 Provider YAML to specify the provider package:</p> provider-aws.yaml <pre><code>apiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.upbound.io/upbound/provider-aws-s3:v0.37.0\n</code></pre>"},{"location":"lab1/#4-apply-configurations","title":"4. Apply Configurations","text":"<p>Apply the configurations to your Kubernetes cluster:</p> Apply Configurations bash <pre><code>kubectl apply -f aws-credentials.yaml kubectl apply -f s3-bucket.yaml kubectl apply -f aws-s3-provider.yaml\n</code></pre>"},{"location":"lab1/#5-verify","title":"5. Verify","text":"<p>Check the status and logs to ensure the Crossplane AWS S3 provider and S3 bucket are successfully configured:</p> Verify bash <pre><code>kubectl get provider,config,bucket\nkubectl logs -l app=provider-aws-s3-controller -n crossplane-system\n</code></pre>"},{"location":"lab1/#conclusion","title":"Conclusion","text":"<p>You have successfully configured a Crossplane AWS S3 provider and created an S3 bucket. Refer to Crossplane AWS Provider Documentation for more information.</p>"},{"location":"lab2/","title":"Lab Document: Crossplane S3 Bucket CompositeResourceDefinition Configuration","text":""},{"location":"lab2/#overview","title":"Overview","text":"<p>This lab guides you through the configuration of a CompositeResourceDefinition (CRD) for managing AWS S3 Buckets using Crossplane. The CRD allows you to provision S3 Buckets in a Kubernetes environment.</p>"},{"location":"lab2/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to a Kubernetes cluster</li> <li>Crossplane installed on the Kubernetes cluster</li> </ul>"},{"location":"lab2/#checklist","title":"Checklist","text":"<ul> <li>[ ] Define and Apply the CompositeResourceDefinition</li> <li>[ ] Create a Composition for S3Bucket</li> <li>[ ] Instantiate an S3Bucket resource</li> </ul>"},{"location":"lab2/#steps","title":"Steps","text":""},{"location":"lab2/#1-define-and-apply-the-compositeresourcedefinition","title":"1. Define and Apply the CompositeResourceDefinition","text":"<p>Edit the CompositeResourceDefinition YAML to define the structure for managing S3 Buckets:</p> s3buckets-crd.yaml <pre><code>apiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: s3buckets.example.org\nspec:\n  group: example.org\n  names:\n    kind: S3Bucket\n    plural: s3buckets\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  region:\n                    type: string\n                required:\n                - region\n            required:\n            - parameters` \n</code></pre> <p>Apply the configuration to your Kubernetes cluster:</p> Apply s3buckets-crd  <pre><code>kubectl apply -f s3buckets-crd.yaml \n</code></pre>"},{"location":"lab2/#2-create-a-composition-for-s3bucket","title":"2. Create a Composition for S3Bucket","text":"<p>Edit the Composition YAML to specify how the S3Bucket resource maps to the underlying AWS S3 Bucket:</p> s3buckets-composition.yaml <pre><code>apiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: s3buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: S3Bucket\n  resources:\n    - name: bucket\n      base:\n        apiVersion: s3.aws.upbound.io/v1beta1\n        kind: Bucket\n        spec:\n          forProvider:\n            tags:\n              Name: SampleBuckets\n          publishConnectionDetailsTo:\n            name: s3-kubernetes-secret\n          writeConnectionSecretToRef:\n            name: s3-secret\n            namespace: default\n      patches:\n      - type: FromCompositeFieldPath\n        fromFieldPath: metadata.name\n        toFieldPath: spec.forProvider.name\n      - type: FromCompositeFieldPath\n        fromFieldPath: metadata.name\n        toFieldPath: metadata.annotations.crossplane.io/external-name\n      - type: FromCompositeFieldPath\n        fromFieldPath: spec.parameters.region\n        toFieldPath: spec.forProvider.region\n</code></pre> <p>Apply the Composition configuration:</p> Apply Composition  <pre><code>kubectl apply -f s3buckets-composition.yaml\n</code></pre>"},{"location":"lab2/#3-instantiate-an-s3bucket-resource","title":"3. Instantiate an S3Bucket resource","text":"<p>Create an instance of the S3Bucket resource to provision an AWS S3 Bucket:</p> my-s3-bucket.yaml <pre><code>apiVersion: example.org/v1alpha1\nkind: S3Bucket\nmetadata:\n  name: my-s3-bucket\nspec:\n  parameters:\n    region: eu-central-1\n ```\n\n&lt;/details&gt;\nApply the S3Bucket resource configuration:\n\n&lt;details&gt;\n     &lt;summary&gt;apply bucket&lt;/summary&gt;\n\n```bash\nkubectl apply -f my-s3-bucket.yaml\n</code></pre>"},{"location":"lab2/#conclusion","title":"Conclusion","text":"<p>You have successfully defined a CompositeResourceDefinition for S3 Buckets, created a Composition for mapping to the AWS S3 Bucket resource, and instantiated an S3Bucket resource. This allows you to provision S3 Buckets in your Kubernetes environment using Crossplane. For more information, refer to Crossplane AWS Provider Documentation.</p>"},{"location":"lab21/","title":"Lab 21: Web Application","text":""},{"location":"lab21/#cross-plane-aws-architecture-diagram","title":"Cross-Plane AWS Architecture Diagram","text":""},{"location":"lab21/#overview","title":"Overview","text":"<p>Creating a crossplane configuration for the given architecture and set it up for deployment for two teams is crucial for understanding how various AWS services collaborate to support a web application. This document provides a simplified example of such a diagram for a basic web application hosted on AWS.</p>"},{"location":"lab21/#logical-architecture-diagram","title":"Logical Architecture Diagram","text":""},{"location":"lab21/#explanation-of-components","title":"Explanation of Components:","text":"<ol> <li>Internet:</li> <li> <p>Represents the public internet where users access your application.</p> </li> <li> <p>Elastic Load Balancer (ELB):</p> </li> <li>Acts as a load balancer distributing incoming traffic across multiple EC2 instances.</li> <li> <p>Enhances high availability and scalability.</p> </li> <li> <p>Auto Scaling Group (ASG):</p> </li> <li>Manages a group of EC2 instances.</li> <li> <p>Automatically scales the number of instances based on traffic demand for optimal performance.</p> </li> <li> <p>EC2 Instances:</p> </li> <li>Virtual servers in the AWS cloud running your web application.</li> <li> <p>Multiple instances for redundancy and scalability.</p> </li> <li> <p>Web Server:</p> </li> <li> <p>Software component running on EC2 instances serving your web application.</p> </li> <li> <p>Application Database:</p> </li> <li>Stores your application's data.</li> <li>Can be an RDS instance, Aurora, or another database service.</li> </ol>"},{"location":"lab21/#workflow","title":"Workflow","text":"<ol> <li> <p>User accesses the web application through the Internet.</p> </li> <li> <p>The Elastic Load Balancer distributes the traffic across multiple EC2 instances.</p> </li> <li> <p>The Auto Scaling Group ensures the right number of instances, adjusting capacity based on traffic.</p> </li> <li> <p>Each EC2 instance runs a web server serving the application.</p> </li> <li> <p>EC2 instances connect to a shared application database for data storage.</p> </li> </ol>"},{"location":"lab22/","title":"Lab 22: Serverless Architecture","text":"<p>Creating a crossplane configuration for the given architecture and set it up for deployment for two teams involves representing an application or system that relies heavily on AWS Lambda, AWS API Gateway, and other serverless services. </p>"},{"location":"lab22/#logical-architecture-diagram","title":"Logical Architecture Diagram","text":""},{"location":"lab22/#explanation-of-components","title":"Explanation of Components:","text":"<ul> <li>Internet: Represents the public internet where clients make requests to your serverless application.</li> <li>AWS API Gateway: Acts as a front-end service to your serverless application, handling HTTP requests and routing them to AWS Lambda functions. It also provides features like authentication and rate limiting.</li> <li>AWS Lambda Function: Serverless compute functions that execute code in response to incoming requests. These functions are event-driven and can perform various tasks, such as processing data, running business logic, or interacting with other AWS services.</li> <li>DynamoDB Table: A NoSQL database service provided by AWS. It can be used to store and retrieve data for your serverless application. Lambda functions can interact with DynamoDB for data storage and retrieval.</li> </ul>"},{"location":"lab22/#workflow","title":"Workflow","text":"<ol> <li>Clients make requests to your application through the AWS API Gateway.</li> <li>The API Gateway forwards requests to the appropriate AWS Lambda function(s) based on the configured endpoints and HTTP methods.</li> <li>AWS Lambda functions execute the code, which may include processing, data retrieval from DynamoDB, and other tasks.</li> <li>DynamoDB stores and retrieves data as needed by your Lambda functions.</li> </ol>"},{"location":"lab22/#additional-notes","title":"Additional Notes","text":"<p>This serverless architecture provides a highly scalable and cost-effective solution for handling various types of workloads. It automatically scales based on incoming requests, and you only pay for the compute resources used during the execution of Lambda functions.</p>"},{"location":"lab23/","title":"Lab 23: Kubernetes","text":"<p>Creating a crossplane configuration for the given architecture and set it up for deployment for two teams that incorporates Amazon Elastic Kubernetes Service (EKS) and Amazon RDS (Relational Database Service) provides a more traditional containerized microservices approach with managed database storage. </p>"},{"location":"lab23/#logical-architecture-diagram","title":"Logical Architecture Diagram","text":""},{"location":"lab23/#explanation-of-components","title":"Explanation of Components:","text":"<ul> <li>Internet: Represents the public internet where users access your services.</li> <li>AWS Elastic Load Balancer (ELB): Acts as a load balancer that distributes incoming traffic across multiple pods in your EKS cluster. ELB helps with high availability and scalability.</li> <li>Amazon EKS Cluster: A managed Kubernetes cluster that orchestrates containerized applications using Kubernetes. It manages the deployment and scaling of containers across multiple worker nodes.</li> <li>Pods: Kubernetes pods are the smallest deployable units in an EKS cluster. Each pod can contain one or more containers. In this diagram, multiple pods are deployed within the EKS cluster.</li> <li>Containers: These are individual application components that run within the pods. Containers hold your application code and dependencies.</li> <li>Amazon RDS: A managed relational database service provided by AWS. It can be used for storing and retrieving structured data. This can be an RDS instance running a database engine such as MySQL, PostgreSQL, or others.</li> </ul>"},{"location":"lab23/#workflow","title":"Workflow","text":"<ol> <li>User requests come through the internet and are distributed by the Elastic Load Balancer (ELB) to different pods within your EKS cluster.</li> <li>Each pod can host one or more containers. These containers run your application code and can communicate with each other as needed.</li> <li>The application components within the containers may interact with Amazon RDS to read or write data, depending on your application's requirements.</li> </ol>"},{"location":"lab23/#additional-notes","title":"Additional Notes","text":"<p>This architecture is suitable for applications with containerized microservices that require orchestration, scalability, and the use of a managed relational database.</p> <p>Please note that setting up an EKS cluster and managing Kubernetes requires careful configuration and administration. Additionally, the choice of RDS engine and its configuration (e.g., security, scaling options) will depend on your specific application needs. The actual architecture may be more complex and include additional services like caching (e.g., Amazon ElastiCache), message queues (e.g., Amazon SQS), and more, depending on your application's requirements.</p>"},{"location":"lab24/","title":"Lab 24: Complex Architecture","text":"<p>Creating a crossplane configuration for the given architecture and set it up for deployment for two teams involving Amazon Elastic Kubernetes Service (EKS) and Amazon RDS, along with additional AWS services, is a challenging task. Here's a more advanced architecture that represents a multi-tiered, highly available, and scalable web application</p>"},{"location":"lab24/#logical-architecture-diagram","title":"Logical Architecture Diagram","text":""},{"location":"lab24/#explanation-of-components","title":"Explanation of Components:","text":"<ul> <li>Internet: Represents user access to your web application.</li> <li>Amazon Route 53: DNS service for routing traffic to AWS resources.</li> <li>AWS Elastic Load Balancer (ELB): Distributes incoming traffic across multiple pods in your Amazon EKS cluster. Provides high availability and scalability.</li> <li>Amazon EKS Cluster: Managed Kubernetes cluster for orchestrating containerized applications.</li> <li>Pods: Kubernetes pods containing containers that run your application components.</li> <li>Containers: Individual application components running within pods.</li> <li>Application Server: Represents the application logic within containers.</li> <li>Amazon RDS (Primary): Managed relational database service, set up with multi-AZ (Availability Zone) configuration for high availability and automatic failover.</li> <li>Amazon ElastiCache: Managed in-memory caching service for caching frequently accessed data to improve application performance.</li> <li>Amazon S3: Object storage service used for storing static assets such as images, stylesheets, and JavaScript files.</li> </ul>"},{"location":"lab24/#workflow","title":"Workflow","text":"<ol> <li>User requests are routed through Amazon Route 53, which directs traffic to the Elastic Load Balancer (ELB).</li> <li>The ELB balances traffic across multiple pods in the EKS cluster, ensuring high availability and scalability.</li> <li>Within each pod, containers run the application logic, and they can communicate with each other as needed.</li> <li>The application may utilize Amazon RDS as the primary database for structured data storage. The multi-AZ setup ensures high availability and data redundancy.</li> <li>Amazon ElastiCache is used for caching frequently accessed data, reducing the load on the database and improving response times.</li> <li>Static assets are stored in Amazon S3, providing a scalable and cost-effective solution for serving static content.</li> </ol>"},{"location":"lab24/#additional-notes","title":"Additional Notes","text":"<p>This architecture is suitable for a complex, production-grade web application that requires high availability, scalability, and a managed database solution. However, implementing and maintaining such an architecture can be challenging, and it may involve additional considerations for security, monitoring, and disaster recovery.</p>"},{"location":"lab3/","title":"Lab Document: Crossplane Helm Release Configuration for Argo CD and Ingress NGINX","text":""},{"location":"lab3/#overview","title":"Overview","text":"<p>This lab demonstrates configuring and deploying Argo CD and Ingress NGINX using Crossplane Helm releases in a Kubernetes environment. You'll learn how to create and apply Helm-based Crossplane configurations for efficient cluster management.</p>"},{"location":"lab3/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to a Kubernetes cluster</li> <li>Crossplane installed on the Kubernetes cluster</li> <li>Basic understanding of Helm charts</li> </ul>"},{"location":"lab3/#checklist","title":"Checklist","text":"<ul> <li>[ ] Define and Apply <code>ProviderConfig</code> for Helm</li> <li>[ ] Deploy Argo CD using Crossplane Helm Release</li> <li>[ ] Deploy Ingress NGINX using Crossplane Helm Release</li> <li>[ ] Verify the deployments</li> </ul>"},{"location":"lab3/#steps","title":"Steps","text":""},{"location":"lab3/#1-define-and-apply-providerconfig-for-helm","title":"1. Define and Apply ProviderConfig for Helm","text":"<p>Create a <code>ProviderConfig</code> for Helm to interact with your Kubernetes cluster:</p> provider-helm.yaml <pre><code>apiVersion: helm.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: helm-provider\nspec:\n  credentials:\n    source: InjectedIdentity\n</code></pre> <p>Apply the ProviderConfig:</p> Apply the ProviderConfig: <pre><code>\nkubectl apply -f provider-helm.yaml\n\n</code></pre>"},{"location":"lab3/#2-deploy-argo-cd-using-crossplane-helm-release","title":"2. Deploy Argo CD using Crossplane Helm Release","text":"<p>Deploy Argo CD by defining a Release object:</p> argo-cd-release.yaml <pre><code>apiVersion: helm.crossplane.io/v1beta1\nkind: Release\nmetadata:\n  name: argo-cd\nspec:\n  forProvider:\n    chart:\n      name: argo-cd\n      repository: https://argoproj.github.io/argo-helm\n      version: 5.47.0\n    namespace: argo-cd\n  providerConfigRef:\n    name: helm-provider\n</code></pre> <p>Apply the Argo CD release:</p> argo-cd-release.yaml <pre><code>kubectl apply -f argo-cd-release.yaml\n</code></pre>"},{"location":"lab3/#3-deploy-ingress-nginx-using-crossplane-helm-release","title":"3. Deploy Ingress NGINX using Crossplane Helm Release","text":"<p>Similarly, deploy Ingress NGINX:</p> ingress-nginx-release.yaml <pre><code>apiVersion: helm.crossplane.io/v1beta1\nkind: Release\nmetadata:\n  name: ingress-nginx\nspec:\n  forProvider:\n    chart:\n      name: ingress-nginx\n      repository: https://kubernetes.github.io/ingress-nginx\n      version: 4.8.3\n    namespace: ingress-nginx\n  providerConfigRef:\n    name: helm-provider\n</code></pre> <p>Apply the Ingress NGINX release:</p> Apply the Ingress NGINX release: <pre><code>kubectl apply -f ingress-nginx-release.yaml\n</code></pre>"},{"location":"lab3/#4-verify-the-deployments","title":"4. Verify the Deployments","text":"<p>After applying the configurations, verify that both Argo CD and Ingress NGINX are correctly deployed and running in your cluster.</p>"},{"location":"lab3/#conclusion","title":"Conclusion","text":"<p>You have successfully configured and deployed Argo CD and Ingress NGINX using Crossplane Helm releases. This lab demonstrates the power of Crossplane in managing complex Kubernetes deployments with ease and efficiency.</p>"},{"location":"lab4/","title":"Lab 4: Deploying AWS RDS and Kubernetes Application with Crossplane","text":""},{"location":"lab4/#overview","title":"Overview","text":"<p>In this lab, you will learn how to use Crossplane to provision AWS RDS instances, DBSubnetGroups, and SecurityGroups. You'll also deploy a sample Kubernetes application that interacts with the provisioned RDS instance.</p>"},{"location":"lab4/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to an EKS cluster.</li> <li>Crossplane installed on the EKS cluster.</li> <li>AWS CLI installed and configured.</li> </ul>"},{"location":"lab4/#steps","title":"Steps","text":""},{"location":"lab4/#step-1-configure-aws-provider-in-crossplane","title":"Step 1: Configure AWS Provider in Crossplane","text":"<p>Create a secret in Kubernetes to store your AWS credentials:</p> <pre><code>kubectl create secret generic crossplane-aws-secret \\\n-n crossplane-system \\\n--from-file=credentials=./aws-credentials.txt` \n</code></pre>"},{"location":"lab4/#step-2-create-namespaces-for-the-application-and-database","title":"Step 2: Create Namespaces for the Application and Database","text":"<pre><code>kubectl create ns catalog\nkubectl create ns ui\n</code></pre>"},{"location":"lab4/#step-3-configure-database-password","title":"Step 3: Configure Database Password","text":"<p>Generate a random password for the database and store it as a Kubernetes secret:</p> <pre><code>openssl rand -base64 12\nkubectl create secret generic catalog-db-crossplane-passwd -n catalog --from-literal=password=$(openssl rand -base64 12)\n</code></pre>"},{"location":"lab4/#step-4-deploy-aws-resources-using-crossplane","title":"Step 4: Deploy AWS Resources using Crossplane","text":""},{"location":"lab4/#41-deploy-a-dbsubnetgroup","title":"4.1 Deploy a DBSubnetGroup","text":"<pre><code># Source: chartlab4/templates/rds-dbgroup.yaml\napiVersion: database.aws.crossplane.io/v1beta1\nkind: DBSubnetGroup\nmetadata:\n  name: $(EKS_CLUSTER_NAME)-catalog-crossplane\n  labels:\n    app.kubernetes.io/created-by: eks-workshop\nspec:\n  forProvider:\n    region: $(AWS_REGION)\n    description: DBSubnet group\n    subnetIds:\n    - $(VPC_PRIVATE_SUBNET_ID_1)\n    - $(VPC_PRIVATE_SUBNET_ID_2)\n    - $(VPC_PRIVATE_SUBNET_ID_3)\n    tags:\n    - key: created-by\n      value: eks-workshop-v2\n    - key: env\n      value: $(EKS_CLUSTER_NAME)\n    - key: managed-by\n      value: crossplane\n  providerConfigRef:\n    name: crossplane-default\n</code></pre>"},{"location":"lab4/#42-deploy-a-securitygroup","title":"4.2 Deploy a SecurityGroup","text":"<pre><code>#Source: chartlab4/templates/rds-security-group.yaml\napiVersion: ec2.aws.crossplane.io/v1beta1\nkind: SecurityGroup\nmetadata:\n  name: $(EKS_CLUSTER_NAME)-catalog-crossplane\n  labels:\n    app.kubernetes.io/created-by: eks-workshop\nspec:\n  forProvider:\n    region: $(AWS_REGION)\n    description: SecurityGroup\n    groupName: $(EKS_CLUSTER_NAME)-catalog-crossplane\n    vpcId: $(VPC_ID)\n    ingress:\n      - fromPort: 3306\n        toPort: 3306\n        ipProtocol: tcp\n        ipRanges:\n          - cidrIp: \"$(VPC_CIDR)\"\n    egress:\n      # AWS will treat it as all ports any protocol\n      - ipProtocol: '-1'\n        ipRanges:\n          - cidrIp: \"0.0.0.0/0\"\n    tags:\n    - key: created-by\n      value: eks-workshop-v2\n    - key: env\n      value: $(EKS_CLUSTER_NAME)\n    - key: managed-by\n      value: crossplane\n  providerConfigRef:\n    name: crossplane-default\n</code></pre>"},{"location":"lab4/#43-deploy-a-dbinstance","title":"4.3 Deploy a DBInstance","text":"<pre><code>#Source: chartlab4/templates/rds-instance.yaml\napiVersion: rds.aws.crossplane.io/v1alpha1\nkind: DBInstance\nmetadata:\n  name: $(EKS_CLUSTER_NAME)-catalog-crossplane\n  labels:\n    app.kubernetes.io/created-by: eks-workshop\nspec:\n  forProvider:\n    region: $(AWS_REGION)\n    allocatedStorage: 20\n    dbInstanceClass: db.t4g.micro\n    dbName: catalog\n    engine: mysql\n    engineVersion: \"8.0\"\n    masterUsername: admin\n    autogeneratePassword: true\n    skipFinalSnapshot: true\n    applyImmediately: true\n    dbSubnetGroupNameRef:\n      name: $(EKS_CLUSTER_NAME)-catalog-crossplane\n    vpcSecurityGroupIDRefs:\n      - name: $(EKS_CLUSTER_NAME)-catalog-crossplane\n    masterUserPasswordSecretRef:\n      key: password\n      name: catalog-db-crossplane-passwd\n      namespace: catalog\n    tags:\n    - key: created-by\n      value: eks-workshop-v2\n    - key: env\n      value: $(EKS_CLUSTER_NAME)\n    - key: managed-by\n      value: crossplane\n  writeConnectionSecretToRef:\n    name: catalog-db-crossplane\n    namespace: catalog\n  providerConfigRef:\n    name: crossplane-default\n</code></pre> <p>Apply these configurations with <code>kubectl apply</code>.</p>"},{"location":"lab4/#step-5-deploy-the-kubernetes-application","title":"Step 5: Deploy the Kubernetes Application","text":"<p>Deploy your application in the Kubernetes cluster:</p> <pre><code>kubectl apply -k https://github.com/itumor/crossplane-labs/tree/main/lab4/application\n</code></pre>"},{"location":"lab4/#step-6-verifying-the-deployment","title":"Step 6: Verifying the Deployment","text":"<ul> <li>Check the status of AWS resources using AWS CLI or AWS Management Console.</li> <li>Verify the application deployment in Kubernetes using <code>kubectl get pods -n ui</code>.</li> </ul>"},{"location":"lab4/#cleanup","title":"Cleanup","text":"<p>Delete the resources once you're done with the lab:</p> <pre><code>kubectl delete -f [configuration-file]\nkubectl delete secret catalog-db-crossplane-passwd -n catalog` \n</code></pre>"},{"location":"lab4/#conclusion","title":"Conclusion","text":"<p>In this lab, you have successfully used Crossplane to provision AWS resources and deploy a Kubernetes application that interacts with these resources. This demonstrates the power of Crossplane in managing cloud-native applications and infrastructure as code.</p>"},{"location":"lab5/","title":"Lab 6: Managing EKS Clusters and Services Deployment","text":""},{"location":"lab5/#overview","title":"Overview","text":"<p>In this lab, you will learn to manage node groups in an EKS cluster, deploy the Kubecost addon, upgrade the cluster, set up IAM roles for services, and install the AWS EBS CSI driver. You will also learn to use Helm to deploy Kubecost for cost monitoring.</p>"},{"location":"lab5/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS CLI installed and configured.</li> <li>eksctl installed.</li> <li>Helm installed.</li> <li>Access to an AWS account with permissions to manage EKS.</li> </ul>"},{"location":"lab5/#steps","title":"Steps","text":""},{"location":"lab5/#step-1-create-a-managed-node-group-with-spot-instances","title":"Step 1: Create a Managed Node Group with Spot Instances","text":"<p>Create a node group in your EKS cluster using spot instances:</p> <pre><code>\neksctl create nodegroup \\\n  --cluster=crossplane-cluster-1 --region=eu-central-1\\\n  --managed --spot --name=ng-spot \\\n  --instance-types=m5.large,m4.large,m5d.large,m5a.large,m5ad.large,m5n.large,m5dn.large\\\n  --nodes-min=2\\\n  --nodes-max=5\n</code></pre>"},{"location":"lab5/#step-2-delete-the-node-group","title":"Step 2: Delete the Node Group","text":"<p>Delete the node group when no longer needed:</p> <pre><code>\neksctl delete nodegroup \\\n  --cluster=crossplane-cluster-1 --region=eu-central-1 --name=spot\n</code></pre>"},{"location":"lab5/#step-3-create-addon-in-eks-cluster","title":"Step 3: Create Addon in EKS Cluster","text":"<p>Deploy the Kubecost addon to your EKS cluster:</p> <pre><code>\naws eks create-addon --addon-name kubecost_kubecost --cluster-name crossplane-cluster-1 --region eu-central-1\n</code></pre>"},{"location":"lab5/#step-4-upgrade-the-eks-cluster","title":"Step 4: Upgrade the EKS Cluster","text":"<p>Upgrade your EKS cluster to the latest version:</p> <pre><code>\neksctl upgrade cluster --name crossplane-cluster-1 --region eu-central-1\n</code></pre>"},{"location":"lab5/#step-5-associate-iam-oidc-provider","title":"Step 5: Associate IAM OIDC Provider","text":"<p>Associate IAM OIDC provider with your EKS cluster:</p> <pre><code>\neksctl utils associate-iam-oidc-provider --region=eu-central-1 --cluster=crossplane-cluster-1 --approve\n</code></pre>"},{"location":"lab5/#step-6-create-iam-service-account-for-ebs-csi-driver","title":"Step 6: Create IAM Service Account for EBS CSI Driver","text":"<p>Create an IAM service account for the AWS EBS CSI driver:</p> <pre><code>\neksctl create iamserviceaccount   \\\n    --name ebs-csi-controller-sa   \\\n    --namespace kube-system   \\\n    --cluster crossplane-cluster-1   \\\n    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy  \\\n    --approve \\\n    --role-only \\\n    --role-name AmazonEKS_EBS_CSI_DriverRole\n</code></pre> <p>Extract the ARN of the created role:</p> <pre><code>\nexport SERVICE_ACCOUNT_ROLE_ARN=$(aws iam get-role --role-name AmazonEKS_EBS_CSI_DriverRole --output json | jq -r '.Role.Arn')\n</code></pre>"},{"location":"lab5/#step-7-deploy-the-aws-ebs-csi-driver","title":"Step 7: Deploy the AWS EBS CSI Driver","text":"<p>Deploy the AWS EBS CSI driver using the created service account:</p> <pre><code>\neksctl create addon --name aws-ebs-csi-driver --cluster crossplane-cluster-1 \\\n    --service-account-role-arn $SERVICE_ACCOUNT_ROLE_ARN --force\n</code></pre>"},{"location":"lab5/#step-8-install-kubecost-using-helm","title":"Step 8: Install Kubecost using Helm","text":"<p>Install Kubecost for cost monitoring:</p> <pre><code>\nhelm upgrade -i kubecost \\\noci://public.ecr.aws/kubecost/cost-analyzer --version 1.107.0 \\\n--namespace kubecost --create-namespace \\\n-f https://raw.githubusercontent.com/kubecost/cost-analyzer-helm-chart/develop/cost-analyzer/values-eks-cost-monitoring.yaml\n</code></pre>"},{"location":"lab5/#step-9-access-kubecost-dashboard","title":"Step 9: Access Kubecost Dashboard","text":"<p>Forward the Kubecost port to access the dashboard:</p> <pre><code>\nkubectl port-forward --namespace kubecost deployment/kubecost-cost-analyzer 9090\n</code></pre>"},{"location":"lab5/#conclusion","title":"Conclusion","text":"<p>You have successfully managed node groups in your EKS cluster, set up IAM roles, deployed the AWS EBS CSI driver, and installed Kubecost for cost monitoring. These steps are crucial for efficient Kubernetes cluster management and cost optimization.</p>"}]}